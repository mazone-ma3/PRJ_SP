/* Core-Crashers シナリオ設定定義ヘッダ By ma3 2001. */

#ifndef SP_ENE_H_INCLUDE
#define SP_ENE_H_INCLUDE

/* スケジュール解析で行うコマンド */
enum {
	COM_DUMMY,

	//・処理待ち
	COM_WAITCOUNT,	// カウント数待ち		(*)
	COM_TKALLDEL,	// 敵全滅待ち			(*)

	//・敵追加
	COM_TKAPPEND,	//敵番号(雑魚、ボス)、シナリオ番号、出すショットの種類、など。
					//→敵整理番号？

	//・BGM変更
	COM_BGMCHANGE,	//BGM番号
	COM_BGMFADEOUT,	//・BGMフェードアウト

	//・メッセージ表示
	COM_PUTMESSAGE, //表示メッセージ、X座標、Y座標、後に付ける数値
					//(ステージ数表示)
					//(ボス警告表示)

	//・面クリア
	COM_STAGEADD,
	COM_END,

	COM_SE,

	//・各種エフェクト
	COM_BGPALFADEOUT, //背景BGフェードアウト
	COM_JIKIMOVE	//自機自動移動 移動先X座標、Y座標
};

char command_length[] = {
	1,	// COM_DUMMY
	2,	// COM_WAITCOUNT
	1,	// COM_TKALLDEL
	7,	// COM_TKAPPEND
	2,	// COM_BGMCHANGE
	1,	// COM_BGMFADEOUT
	4,	// COM_PUTMESSAGE
	4,	// COM_STAGEADD
	1,	// COM_END
	2,	// COM_SE
	1,	// COM_BGPALFADEOUT
	1,	// COM_JIKIMOVE
};

char *message[] = {
	"                 ",
	"     WARNING     ",
	"STAGE ",
};

int stg1_data[] = {
	// STAGE 1
	COM_STAGEADD, 15, 12, 1,

	COM_WAITCOUNT, 75,
	COM_WAITCOUNT, 75,

	COM_PUTMESSAGE, 15, 12, 0,

/*	COM_TKAPPEND, PAT_BOSS1, 9, 80, SPR_IN_Y, 100, 1,
	COM_WAITCOUNT, 75,
	COM_WAITCOUNT, 75,

	COM_TKAPPEND, PAT_BOSS1, 9, 80, SPR_IN_Y, 100, 1,
	COM_WAITCOUNT, 75,
	COM_WAITCOUNT, 75,

	COM_TKAPPEND, PAT_BOSS1, 9, 80, SPR_IN_Y, 100, 1,
	COM_WAITCOUNT, 75,
	COM_WAITCOUNT, 75,
*/
//	COM_TKALLDEL,

				// GRP, MOVE, X, Y, HP

	// HERIZAKO 1

	COM_TKAPPEND, PAT_TEKI3, 5, 32, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI3, 5, 128, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 60,

	COM_TKAPPEND, PAT_TEKI3, 5, 16, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI3, 5, 144, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 20,

	COM_WAITCOUNT, 75,
//	COM_TKALLDEL,

	// HENTAI 1

	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,

	COM_WAITCOUNT, 75 / 3 * 2,

	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,

	COM_WAITCOUNT, 75 / 3 * 2,

	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,

	COM_WAITCOUNT, 75 / 3 * 2,

	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,

	COM_WAITCOUNT, 75,

//	COM_TKALLDEL,

//	GURUGURU 1

	COM_TKAPPEND, PAT_TEKI3, 3, 16, SPR_IN_Y, 10, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI3, 3, 144, SPR_IN_Y, 10, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI3, 3, 80, SPR_IN_Y, 10, 0,
	COM_WAITCOUNT, 20,

	COM_WAITCOUNT, 75 * 3,

//	COM_TKALLDEL,

//	HENTAI 2

	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 15,
	COM_TKAPPEND, PAT_TEKI2, 1, 40, SPR_IN_Y, 5, 0,
	COM_TKAPPEND, PAT_TEKI2, 1, 112, SPR_IN_Y, 5, 0,
	COM_WAITCOUNT, 60,

	COM_WAITCOUNT, 75,
//	COM_TKALLDEL,

//	FIRE 1

	COM_TKAPPEND, PAT_TEKI4, 4, 32, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 4, 128, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 4, 48, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 4, 112, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,

	COM_TKALLDEL,
//	COM_WAITCOUNT, 75,
//
//	COM_WAITCOUNT, 75 * 3,

//	HERIZAKO 2

	COM_TKAPPEND, PAT_TEKI3, 5, 32, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI3, 5, 128, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 60,

	COM_TKAPPEND, PAT_TEKI3, 5, 16, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI3, 5, 144, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 60,

	COM_TKAPPEND, PAT_TEKI3, 5, 32, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI3, 5, 128, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 60,

	COM_TKAPPEND, PAT_TEKI3, 5, 16, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI3, 5, 144, SPR_IN_Y, 6, 0,
	COM_WAITCOUNT, 60,

//	COM_WAITCOUNT, 75,

	COM_TKALLDEL,

//	FIRE 2

	COM_TKAPPEND, PAT_TEKI4, 2, 32, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 2, 128, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 2, 48, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 2, 112, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,

	COM_WAITCOUNT, 75 * 3,

	COM_TKAPPEND, PAT_TEKI4, 2, 32, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 2, 128, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 2, 48, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 2, 112, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,

	COM_WAITCOUNT, 75 * 3,

	COM_TKAPPEND, PAT_TEKI4, 2, 32, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 2, 128, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 2, 48, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,
	COM_TKAPPEND, PAT_TEKI4, 2, 112, SPR_IN_Y, 12, 0,
	COM_WAITCOUNT, 20,

//	COM_WAITCOUNT, 75 * 3,

	COM_TKALLDEL,

//	COM_BGMFADEOUT,
//	COM_WAITCOUNT, 75 * 3,

	COM_WAITCOUNT, 75,

//	WARNING - BOSS

	COM_SE, 3,
	COM_PUTMESSAGE, 15, 7, 1,
	COM_WAITCOUNT, 75 / 2,
	COM_PUTMESSAGE, 15, 7, 0,
	COM_WAITCOUNT, 75 / 2,
	COM_PUTMESSAGE, 15, 7, 1,
	COM_WAITCOUNT, 75 / 2,
	COM_PUTMESSAGE, 15, 7, 0,
	COM_WAITCOUNT, 75 / 2,
	COM_PUTMESSAGE, 15, 7, 1,

	COM_TKAPPEND, PAT_BOSS1, 9, 80, SPR_IN_Y, 100, 1,
	COM_WAITCOUNT, 75 / 2,
	COM_PUTMESSAGE, 15, 7, 0,
	COM_WAITCOUNT, 75 / 2,

	COM_TKAPPEND, PAT_TEKI4, 6, 32, SPR_IN_Y, 6, 4,
	COM_TKAPPEND, PAT_TEKI4, 6, 128, SPR_IN_Y, 6, 4,

//	COM_WAITCOUNT, 75,
//	COM_TKAPPEND, PAT_BOSS1, 9, 80, SPR_IN_Y, 100, 1,

//	COM_BGMCHANGE, 2,

	COM_TKALLDEL,

//	COM_BGMFADEOUT,

//	COM_WAITCOUNT, 75 * 3,


	COM_END,

//	COM_DUMMY,
};

int *stagedata[] = {
	stg1_data,
	stg1_data,
	stg1_data,
};

	// 敵種類一括定義テーブル
	// 敵番号(雑魚、ボス)、シナリオ番号、出すショットの種類
	// 敵行動パターン(記述擬似スクリプト？)
typedef struct {
	char chrno;
	char script;
	char shotno;
}teki_def;

#endif
